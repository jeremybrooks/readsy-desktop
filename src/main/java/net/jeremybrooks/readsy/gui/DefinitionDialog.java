/*
 * Copyright (c) 2013, Jeremy Brooks
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the FreeBSD Project.
 */
package net.jeremybrooks.readsy.gui;

import net.jeremybrooks.knicker.Knicker.SourceDictionary;
import net.jeremybrooks.knicker.WordApi;
import net.jeremybrooks.knicker.dto.Definition;
import org.apache.log4j.Logger;

import javax.swing.GroupLayout;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.WindowConstants;
import java.awt.Container;
import java.util.EnumSet;
import java.util.List;
import java.util.ResourceBundle;

/**
 * Look up the definition of a word, and display it.
 *
 * @author Jeremy Brooks
 */
public class DefinitionDialog extends javax.swing.JDialog {

	/**
	 * Logging.
	 */
	private Logger logger = Logger.getLogger(DefinitionDialog.class);

	private ResourceBundle bundle = ResourceBundle.getBundle("localization.definition_dialog");


	/**
	 * Creates new form DefinitionDialog
	 */
	public DefinitionDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		logger.info("init complete");
		setBounds((parent.getWidth() / 2) + parent.getX() - (400 / 2),
				(parent.getHeight() / 2) + parent.getY() - (322 / 2),
				400, 322);
		logger.info("bounds set");
	}


	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		jScrollPane1 = new JScrollPane();
		jTextPane1 = new JTextPane();

		//======== this ========
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		Container contentPane = getContentPane();

		//======== jScrollPane1 ========
		{

			//---- jTextPane1 ----
			jTextPane1.setContentType("text/html");
			jTextPane1.setEditable(false);
			jScrollPane1.setViewportView(jTextPane1);
		}

		GroupLayout contentPaneLayout = new GroupLayout(contentPane);
		contentPane.setLayout(contentPaneLayout);
		contentPaneLayout.setHorizontalGroup(
				contentPaneLayout.createParallelGroup()
						.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
		);
		contentPaneLayout.setVerticalGroup(
				contentPaneLayout.createParallelGroup()
						.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
		);
		setLocationRelativeTo(getOwner());
	}// </editor-fold>//GEN-END:initComponents


	/**
	 * Define the word.
	 *
	 * @param word word to define.
	 */
	public void define(String word) {
		StringBuilder sb = new StringBuilder("<html><body><h1>");
		sb.append(word).append("</h1><p><i>"+ bundle.getString("lookupMessage.text") + "</i></p></body></html>");
		this.jTextPane1.setText(sb.toString());

		new Lookup(word).execute();
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JScrollPane jScrollPane1;
	private JTextPane jTextPane1;
	// End of variables declaration//GEN-END:variables


	/**
	 * Do the lookup in a separate thread.
	 * <p/>
	 * <p>This is a SwingWorker, and will handle lookup and display.</p>
	 */
	class Lookup extends javax.swing.SwingWorker<List<Definition>, Object> {

		/**
		 * The word to look up.
		 */
		private String word;

		/**
		 * Require use of the non-default constructor
		 */
		private Lookup() {
		}

		/**
		 * Construct a new instance of Lookup.
		 *
		 * @param word the word to define.
		 */
		public Lookup(String word) {
			this.word = word;
		}


		/**
		 * Look up the definition of the word.
		 * <p/>
		 * <p>This method will try each supported Wordnik dictionary, in this
		 * order:
		 * <ul><li>wordnet</li>
		 * <li>wiktionary</li>
		 * <li>webster</li>
		 * <li>century</li>
		 * </ul></p>
		 *
		 * @return list of definitions for the word.
		 * @throws Exception if there are any errors.
		 */
		@Override
		protected List<Definition> doInBackground() throws Exception {
			List<Definition> retList = this.getDefintions();

			if (retList.isEmpty()) {
				// the API is case sensitive, so try a lowercase version
				logger.info("Nothing found; trying again with lowercase version.");
				this.word = this.word.toLowerCase();
				retList = this.getDefintions();
			}

			return retList;
		}


		/**
		 * Display the definitions when the lookup is finished.
		 * <p/>
		 * <p>If there were no definitions found, display a sane message.</p>
		 */
		@Override
		protected void done() {
			try {
				List<Definition> list = get();
				if (list == null) {
					showError(bundle.getString("errorNullValue"));

				} else if (list.isEmpty()) {
					showError(bundle.getString("errorNoDefinition") + "\"" + word + "\"");

				} else {
					StringBuilder sb = new StringBuilder("<html><body><h1>");
					sb.append(word).append("</h1>");

					int i = 1;
					for (Definition def : list) {
						sb.append("<p><b>").append(i++).append(".</b> ");
						sb.append("<i>").append(def.getPartOfSpeech()).append(": </i>");
						sb.append(def.getText()).append("<br/>");
						sb.append('(').append(def.getAttributionText()).append(')');
						sb.append("</p>");
					}

					sb.append("</body></html>");

					jTextPane1.setText(sb.toString());
					jTextPane1.setCaretPosition(0);
				}


			} catch (Exception e) {
				logger.error("Error looking up word.", e);
				showError(e.toString());
			}

		}


		/**
		 * Convenience method for displaying an error message in the
		 * definition area.
		 *
		 * @param error the error message to display.
		 */
		private void showError(String error) {
			StringBuilder sb = new StringBuilder("<html><body><h1>");
			sb.append(word).append("</h1>");
			sb.append("<p>" + bundle.getString("errorMessage.text") + "</p>");
			sb.append("<p>").append(error).append("</p>");

			jTextPane1.setText(sb.toString());
		}


		private List<Definition> getDefintions() {
			List<Definition> retList = null;
			try {
				logger.info("Looking in ahd");
				retList = WordApi.definitions(word, EnumSet.of(SourceDictionary.ahd));

				if (retList.isEmpty()) {
					logger.info("Looking in wordnet");
					retList = WordApi.definitions(word, EnumSet.of(SourceDictionary.wordnet));
				}

				if (retList.isEmpty()) {
					logger.info("Looking in wiktionary");
					retList = WordApi.definitions(word, EnumSet.of(SourceDictionary.wiktionary));
				}

				if (retList.isEmpty()) {
					logger.info("Looking in webster");
					retList = WordApi.definitions(word, EnumSet.of(SourceDictionary.webster));
				}

				if (retList.isEmpty()) {
					logger.info("Looking in century");
					retList = WordApi.definitions(word, EnumSet.of(SourceDictionary.century));
				}
			} catch (Exception e) {
				logger.error("Error looking up word.", e);
				showError(e.toString());
			}

			return retList;
		}
	}
}
