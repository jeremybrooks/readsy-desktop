/*
 * Copyright (c) 2013, Jeremy Brooks
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the FreeBSD Project.
 */

package net.jeremybrooks.readsy.gui;

import net.jeremybrooks.readsy.Readsy;
import net.jeremybrooks.readsy.bo.ReadsyDataFile;
import org.apache.log4j.Logger;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;


/**
 * This window allows a user to edit the data XML file.
 * Changes are saved whenever the user naviagtes to another day, or when the
 * user closes this window.
 * <p/>
 * When this window is closed, the user is taken back to the main window.
 *
 * @author Jeremy Brooks
 */
public class EditorWindow extends javax.swing.JFrame {

	private Logger logger = Logger.getLogger(EditorWindow.class);
	private DateFormat dateFormatter = new SimpleDateFormat("MMdd");
	private DateFormat prettyDateFormat = new SimpleDateFormat("MMMM dd");
	private ReadsyDataFile dataFile = null;


	/**
	 * Creates new form EditorWindow.
	 * The location is set based on the location of the main window, and the
	 * display is updated.  This should result in the first element of the
	 * data file being shown, ready for editing.
	 *
	 * @param dataFile the object model to work with.
	 */
	public EditorWindow(ReadsyDataFile dataFile) {
		this.dataFile = dataFile;
		initComponents();
		this.lblFilename.setText(dataFile.getReadsyRootElement().getFile().getAbsolutePath());
		if (dataFile.getReadsyRootElement().getYear() != 0) {
			this.lblYearValue.setText(Integer.toString(dataFile.getReadsyRootElement().getYear()));
		}
		this.setLocation(Readsy.getMainWindow().getX(), Readsy.getMainWindow().getY());
		updateDisplay();
	}


	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		ResourceBundle bundle = ResourceBundle.getBundle("localization.editor_window");
		label1 = new JLabel();
		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		txtDescription = new JTextField();
		txtShortDescription = new JTextField();
		lblDate = new JLabel();
		buttonPrevious = new JButton();
		buttonNext = new JButton();
		jLabel5 = new JLabel();
		txtHeading = new JTextField();
		jLabel6 = new JLabel();
		jScrollPane1 = new JScrollPane();
		txtText = new JTextArea();
		jLabel3 = new JLabel();
		lblFilename = new JLabel();
		lblYear = new JLabel();
		lblYearValue = new JLabel();
		doneButton = new JButton();

		//======== this ========
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle(bundle.getString("EditorWindow.this.title"));
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				formWindowClosing();
			}
		});
		Container contentPane = getContentPane();
		contentPane.setLayout(new GridBagLayout());

		//---- label1 ----
		label1.setIcon(new ImageIcon(getClass().getResource("/images/icon64.png")));
		contentPane.add(label1, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH,
			new Insets(0, 0, 0, 0), 0, 0));

		//---- jLabel1 ----
		jLabel1.setText(bundle.getString("EditorWindow.jLabel1.text"));
		contentPane.add(jLabel1, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0,
			GridBagConstraints.EAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- jLabel2 ----
		jLabel2.setText(bundle.getString("EditorWindow.jLabel2.text"));
		contentPane.add(jLabel2, new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0,
			GridBagConstraints.EAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- txtDescription ----
		txtDescription.setColumns(40);
		txtDescription.setToolTipText(bundle.getString("EditorWindow.txtDescription.toolTipText"));
		this.txtDescription.setText(this.dataFile.getReadsyRootElement().getDescription());
		contentPane.add(txtDescription, new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- txtShortDescription ----
		txtShortDescription.setColumns(40);
		txtShortDescription.setToolTipText(bundle.getString("EditorWindow.txtShortDescription.toolTipText"));
		this.txtShortDescription.setText(this.dataFile.getReadsyRootElement().getShortDescription());
		contentPane.add(txtShortDescription, new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- lblDate ----
		lblDate.setText(bundle.getString("EditorWindow.lblDate.text"));
		contentPane.add(lblDate, new GridBagConstraints(2, 5, 1, 1, 1.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- buttonPrevious ----
		buttonPrevious.setIcon(new ImageIcon(getClass().getResource("/images/765-arrow-left_16.png")));
		buttonPrevious.setToolTipText(bundle.getString("EditorWindow.buttonPrevious.toolTipText"));
		buttonPrevious.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				buttonPreviousActionPerformed();
			}
		});
		contentPane.add(buttonPrevious, new GridBagConstraints(1, 5, 1, 1, 0.0, 0.0,
			GridBagConstraints.EAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- buttonNext ----
		buttonNext.setIcon(new ImageIcon(getClass().getResource("/images/766-arrow-right_16.png")));
		buttonNext.setToolTipText(bundle.getString("EditorWindow.buttonNext.toolTipText"));
		buttonNext.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				buttonNextActionPerformed();
			}
		});
		contentPane.add(buttonNext, new GridBagConstraints(3, 5, 1, 1, 0.0, 0.0,
			GridBagConstraints.WEST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- jLabel5 ----
		jLabel5.setText(bundle.getString("EditorWindow.jLabel5.text"));
		contentPane.add(jLabel5, new GridBagConstraints(1, 6, 1, 1, 0.0, 0.0,
			GridBagConstraints.EAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- txtHeading ----
		txtHeading.setColumns(40);
		contentPane.add(txtHeading, new GridBagConstraints(2, 6, 2, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- jLabel6 ----
		jLabel6.setText(bundle.getString("EditorWindow.jLabel6.text"));
		contentPane.add(jLabel6, new GridBagConstraints(1, 7, 1, 1, 0.0, 0.0,
			GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//======== jScrollPane1 ========
		{

			//---- txtText ----
			txtText.setLineWrap(true);
			txtText.setWrapStyleWord(true);
			jScrollPane1.setViewportView(txtText);
		}
		contentPane.add(jScrollPane1, new GridBagConstraints(2, 7, 2, 1, 1.0, 1.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- jLabel3 ----
		jLabel3.setText(bundle.getString("EditorWindow.jLabel3.text"));
		contentPane.add(jLabel3, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
			GridBagConstraints.EAST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- lblFilename ----
		lblFilename.setText("filename");
		contentPane.add(lblFilename, new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0,
			GridBagConstraints.WEST, GridBagConstraints.NONE,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- lblYear ----
		lblYear.setText(bundle.getString("EditorWindow.lblYear.text"));
		lblYear.setHorizontalAlignment(SwingConstants.RIGHT);
		contentPane.add(lblYear, new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH,
			new Insets(5, 5, 5, 5), 0, 0));

		//---- lblYearValue ----
		lblYearValue.setText(bundle.getString("EditorWindow.lblYearValue.text"));
		contentPane.add(lblYearValue, new GridBagConstraints(2, 3, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH,
			new Insets(0, 7, 0, 0), 0, 0));

		//---- doneButton ----
		doneButton.setText(bundle.getString("EditorWindow.doneButton.text"));
		doneButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				doneButtonActionPerformed();
			}
		});
		contentPane.add(doneButton, new GridBagConstraints(3, 8, 1, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.NONE,
			new Insets(0, 0, 0, 0), 0, 0));
		setSize(600, 500);
		setLocationRelativeTo(getOwner());
	}// </editor-fold>//GEN-END:initComponents


	/**
	 * Handle when a user clicks the close button on the window.
	 */
	private void formWindowClosing() {
		this.doClose();
	}


	/**
	 * Save, show a dialog, and exit.
	 */
	private void doClose() {
		if (saveEntry()) {
			JOptionPane.showMessageDialog(this,
					"File saved successfully.",
					"Save",
					JOptionPane.INFORMATION_MESSAGE);

			Readsy.getMainWindow().setVisible(true, false);
			this.setVisible(false);
			this.dispose();
		}
	}


	private void buttonPreviousActionPerformed() {
		saveEntry();
		dataFile.decrementIndex();
		updateDisplay();
	}

	private void buttonNextActionPerformed() {
		saveEntry();
		dataFile.incrementIndex();
		updateDisplay();
	}

	private void doneButtonActionPerformed() {
		this.doClose();
	}

	/**
	 * Update the display.
	 * The current date, heading and text are set based on the index of the
	 * object model.  The focus is set to the heading.
	 */
	private void updateDisplay() {
		StringBuffer buf = new StringBuffer();
		try {
			Date d = this.dateFormatter.parse(this.dataFile.getCurrentEntry().getDate());
			buf.append(this.prettyDateFormat.format(d));
			buf.append(" (");
			buf.append(this.dataFile.getCurrentEntry().getDate());
			buf.append(')');
		} catch (ParseException ex) {
			logger.error("Could not parse date.", ex);
			buf.append(this.dataFile.getCurrentEntry().getDate());
		}

		this.lblDate.setText(buf.toString());
		this.txtHeading.setText(this.dataFile.getCurrentEntry().getHeading());
		this.txtHeading.setCaretPosition(0);
		this.txtText.setText(this.dataFile.getCurrentEntry().getText());
		this.txtText.setCaretPosition(0);
		this.txtHeading.requestFocus();
	}


	/**
	 * Save changes.
	 * The current value of heading, text, description, short description, and
	 * ignore year are passed to the object model.
	 * <p/>
	 * Display an error message if there is any error during the save process.
	 * The actual work is delegated to the object model.
	 */
	private boolean saveEntry() {
		boolean saved = false;
		if (this.dataFile != null && validateEntry()) {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

			this.dataFile.getCurrentEntry().setHeading(this.txtHeading.getText());
			this.dataFile.getCurrentEntry().setText(this.txtText.getText());

			this.dataFile.getReadsyRootElement().setDescription(this.txtDescription.getText());
			this.dataFile.getReadsyRootElement().setShortDescription(this.txtShortDescription.getText());
			this.dataFile.getReadsyRootElement().setVersion(1);

			try {
				dataFile.write();
				saved = true;
			} catch (IOException ioe) {
				JOptionPane.showMessageDialog(
						this,
						"There was a fatal error while writing the file.",
						"Error",
						JOptionPane.ERROR_MESSAGE);
			} finally {
				setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			}
		}
		return saved;
	}

	private boolean validateEntry() {
		boolean valid = true;
		StringBuffer err = new StringBuffer();
		if (this.txtDescription.getText().trim().length() == 0) {
			err.append("  * You must enter a Description.\n");
			valid = false;
		}
		if (this.txtShortDescription.getText().trim().length() == 0) {
			err.append("  * You must enter a Short Description.\n");
			valid = false;
		}

		if (!valid) {
			JOptionPane.showMessageDialog(this,
					"Please correct the following errors:\n" + err.toString(),
					"Error",
					JOptionPane.ERROR_MESSAGE);
		}

		return valid;
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JLabel label1;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JTextField txtDescription;
	private JTextField txtShortDescription;
	private JLabel lblDate;
	private JButton buttonPrevious;
	private JButton buttonNext;
	private JLabel jLabel5;
	private JTextField txtHeading;
	private JLabel jLabel6;
	private JScrollPane jScrollPane1;
	private JTextArea txtText;
	private JLabel jLabel3;
	private JLabel lblFilename;
	private JLabel lblYear;
	private JLabel lblYearValue;
	private JButton doneButton;
	// End of variables declaration//GEN-END:variables
}
